# -*- coding: utf-8 -*-
"""Proyek Analisis Data_Diwa_Prasetyo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ns_dTF_xqplF_A1CmpKpr94VZ4YZpg5I

# Proyek Analisis Data: [Bike Sharing Dataset]
- **Nama:** Diwa
- **Email:** cdaspro5@gmail.com
- **ID Dicoding:** [diwa_prasetyo_ekSz]

## Menentukan Pertanyaan Bisnis

- Bagaimana trend penjualan perentalan sepeda di 4 cuaca?
- Bagaimana trend penjualan perantalan sepeda di 4 musim?

## Import Semua Packages/Library yang Digunakan
"""

#pip install streamlit

import pandas as pd
import seaborn as sns
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import streamlit as st

"""## Data Wrangling

### Gathering Data
"""

url ='https://raw.githubusercontent.com/DiwaPrasetyo02/submission-data-analysis/main/day.csv'
df = pd.read_csv(url)
df

"""### Assessing Data"""

df.isnull().sum()

df.info()

df.duplicated().sum()

"""### Cleaning Data"""

# Mengonversi kolom tanggal
df['dteday'] = pd.to_datetime(df['dteday'])

# Menentukan kolom numerik untuk korelasi
numeric_df = df.select_dtypes(include=[float, int])

df.isna().sum()

print("Jumlah Duplikasi: ", df.duplicated().sum())
df.describe()

"""Pada tahap cleaning data diatas, tidak ditemukan missing value dan duplicated data. Terdapat perubahan tipe data date dari object menjadi datetime

## Exploratory Data Analysis (EDA)

### Explore ...
"""

df.describe(include="all")

# Membuat histogram dengan ukuran kustom
df.hist(figsize=(12, 10))  # Ukuran grafik diatur ke 12x8 inci
plt.show()

# Distribusi Jumlah rental sepeda
plt.figure(figsize=(10, 6))
sns.histplot(df['cnt'], bins=30, kde=True)
plt.title('Distribusi Jumlah Rental Sepeda')
plt.xlabel('Jumlah Rental')
plt.ylabel('Frekuensi')
plt.show()

# Rental sepeda berdasarkan musim
season_map = {1: 'Spring', 2: 'Summer', 3: 'Fall', 4: 'Winter'}
df['season'] = df['season'].map(season_map)

plt.figure(figsize=(10, 6))
sns.boxplot(x='season', y='cnt', data=df)
plt.title('Rental Sepeda berdasarkan Musim')
plt.xlabel('Musim')
plt.ylabel('Jumlah Rental')
plt.show()

# Rental Sepeda berdasarkan Hari kerja
plt.figure(figsize=(10, 6))
sns.boxplot(x='workingday', y='cnt', data=df)
plt.title('Rental Sepeda pada Hari Kerja dan Akhir Pekan')
plt.xlabel('Hari Kerja')
plt.ylabel('Jumlah Rental')
plt.xticks([0, 1], ['Akhir Pekan', 'Hari Kerja'])
plt.show()

# Rental sepeda berdasarkan cuaca
weather_map = {1: 'Clear', 2: 'Mist', 3: 'Light Snow', 4: 'Heavy Rain'}
df['weathersit'] = df['weathersit'].map(weather_map)

plt.figure(figsize=(10, 6))
sns.boxplot(x='weathersit', y='cnt', data=df)
plt.title('Rental Sepeda berdasarkan Kondisi Cuaca')
plt.xlabel('Kondisi Cuaca')
plt.ylabel('Jumlah Rental')
plt.show()

# rental sepeda berdasarkan bulan
df['month'] = df['dteday'].dt.month

plt.figure(figsize=(10, 6))
sns.lineplot(x='month', y='cnt', data=df, estimator='mean', ci=None)
plt.title('Rental Sepeda berdasarkan Bulan')
plt.xlabel('Bulan')
plt.ylabel('Jumlah Rental')
plt.show()

# Menentukan kolom numerik
numeric_df = df.select_dtypes(include=[float, int])

# Menampilkan korelasi antara fitur-fitur numerik
plt.figure(figsize=(12, 10))
sns.heatmap(numeric_df.corr(), annot=True, cmap='coolwarm', vmin=-1, vmax=1)
plt.title('Korelasi antara Fitur-fitur Numerik')
plt.show()

# Distribusi Rental Sepeda berdasarkan Hari dalam Seminggu
df['day_of_week'] = df['dteday'].dt.dayofweek

plt.figure(figsize=(10, 6))
sns.boxplot(x='day_of_week', y='cnt', data=df)
plt.title('Rental Sepeda berdasarkan Hari dalam Seminggu')
plt.xlabel('Hari dalam Seminggu')
plt.ylabel('Jumlah Rental')
plt.xticks(range(7), ['Sen', 'Sel', 'Rab', 'Kam', 'Jum', 'Sab', 'Min'])
plt.show()

# Perbandingan Rental Sepeda pada Hari Kerja dan Hari Libur berdasarkan Musim
plt.figure(figsize=(12, 6))
sns.barplot(x='season', y='cnt', hue='workingday', data=df, estimator=sum)
plt.title('Perbandingan Rental Sepeda pada Hari Kerja dan Hari Libur berdasarkan Musim')
plt.xlabel('Musim')
plt.ylabel('Jumlah Rental')
plt.legend(title='Hari Kerja', labels=['Akhir Pekan', 'Hari Kerja'])
plt.show()

"""## Visualization & Explanatory Analysis"""

# Mengelompokkan data berdasarkan musim dan menjumlahkan total perentalan untuk setiap musim
season_counts = df.groupby(['season', 'dteday'])['cnt'].sum().reset_index()
season_counts['season'] = season_counts['season'].replace(season_map)

# Plot bar chart
plt.figure(figsize=(10, 6))
sns.barplot(x='season', y='cnt', data=season_counts, color="red")
plt.title('Total Count per Season')
plt.xlabel('Season')
plt.ylabel('Total Count')
plt.show()

# Visualisasi jumlah rental sepeda berdasarkan kondisi cuaca
weather_counts = df.groupby(['dteday', 'weathersit'])['cnt'].sum().reset_index()
weather_counts['weathersit'] = weather_counts['weathersit'].replace(weather_map)

plt.figure(figsize=(10, 6))
sns.barplot(x='weathersit', y='cnt', data=weather_counts, color="green")
plt.title('Total Count per weathersit')
plt.xlabel('weathersit')
plt.ylabel('Total Count')
plt.show()

"""### Pertanyaan 1:

Bagaimana trend penjualan perentalan sepeda di 4 cuaca?
"""

# Visualisasi jumlah rental sepeda berdasarkan kondisi cuaca
weather_counts = df.groupby(['dteday', 'weathersit'])['cnt'].sum().reset_index()
weather_counts['weathersit'] = weather_counts['weathersit'].replace(weather_map)

fig1, ax1 = plt.subplots(figsize=(12, 6))
sns.lineplot(x='dteday', y='cnt', hue='weathersit', data=weather_counts, ax=ax1)
ax1.set_xlabel("Tanggal")
ax1.set_ylabel("Jumlah Rental Sepeda")
ax1.set_title("Jumlah Rental Sepeda berdasarkan Kondisi Cuaca")
ax1.tick_params(axis='x', rotation=45)
# Menambahkan interaktivitas
ax1.format_xdata = mdates.DateFormatter('%Y-%m-%d')
ax1.format_ydata = lambda x: f'{x:.0f}'
ax1.grid(True)

plt.show()

"""### Pertanyaan 2:

Bagaimana trend penjualan perantalan sepeda di 4 musim?
"""

season_counts = df.groupby(['season', 'dteday'])['cnt'].sum().reset_index()
season_counts['season'] = season_counts['season'].replace(season_map)

fig2, ax2 = plt.subplots(figsize=(12, 6))
sns.lineplot(x='dteday', y='cnt', hue='season', data=season_counts, ax=ax2)
ax2.set_xlabel("Tanggal")
ax2.set_ylabel("Jumlah Rental Sepeda")
ax2.set_title("Jumlah Rental Sepeda berdasarkan Musim")
ax2.tick_params(axis='x', rotation=45)
# Menambahkan interaktivitas
ax2.format_xdata = mdates.DateFormatter('%Y-%m-%d')
ax2.format_ydata = lambda x: f'{x:.0f}'
ax2.grid(True)

plt.show()

"""## Conclusion

- Hasil dari analisis, bagaimana trend penjualan perentalan sepeda di 4 cuaca?

Dari data yang disajikan pada saat cuaca cerah maka transaksi cenderung naik, selama perentalan tidak terjadi hujan lebat.
- Hasil dari analisis, bagaimana trend penjualan perentalan sepeda di 4 musim?

Dari data yang disajikan penjualan sepeda pada musim panas akan meningkat, akan tetapi pada waktu tertentu juga menurun drastis. Hal ini kemungkinan terjadi karena temperatur suhu yang meningkat sehingga hanya sedikit orang yang keluar.
"""

print("Pandas version:", pd.__version__)
print("Seaborn version:", sns.__version__)
print("Matplotlib version:", matplotlib.__version__)
print("Streamlit version:", st.__version__)